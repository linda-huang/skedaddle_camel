### Starting build.
# Target: camel.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:camel.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules camel.mli > camel.mli.depends
# Target: position.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:position.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules position.mli > position.mli.depends
# Target: position.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:position.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o position.cmi position.mli
# Target: camel.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:camel.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o camel.cmi camel.mli
# Target: camel.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:camel.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules camel.ml > camel.ml.depends
# Target: camel.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:camel.cmo, file:camel.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o camel.cmo camel.ml
# Target: coin.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:coin.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules coin.mli > coin.mli.depends
# Target: coin.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:coin.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o coin.cmi coin.mli
# Target: coin.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:coin.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules coin.ml > coin.ml.depends
# Target: coin.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:coin.cmo, file:coin.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o coin.cmo coin.ml
# Target: enemy.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:enemy.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules enemy.mli > enemy.mli.depends
# Target: enemy.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:enemy.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o enemy.cmi enemy.mli
# Target: enemy.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:enemy.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules enemy.ml > enemy.ml.depends
# Target: enemy.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:enemy.cmo, file:enemy.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o enemy.cmo enemy.ml
# Target: main.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:main.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules main.mli > main.mli.depends
# Target: main.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:main.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o main.cmi main.mli
# Target: main.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:main.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules main.ml > main.ml.depends
# Target: maze.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:maze.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules maze.mli > maze.mli.depends
# Target: state.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules state.mli > state.mli.depends
# Target: maze.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:maze.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o maze.cmi maze.mli
# Target: projectile.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:projectile.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules projectile.mli > projectile.mli.depends
# Target: projectile.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:projectile.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o projectile.cmi projectile.mli
# Target: state.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o state.cmi state.mli
# Target: main.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:main.cmo, file:main.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o main.cmo main.ml
# Target: maze.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:maze.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules maze.ml > maze.ml.depends
# Target: maze.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:maze.cmo, file:maze.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o maze.cmo maze.ml
# Target: position.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:position.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules position.ml > position.ml.depends
# Target: position.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:position.cmo, file:position.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o position.cmo position.ml
# Target: projectile.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:projectile.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules projectile.ml > projectile.ml.depends
# Target: projectile.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:projectile.cmo, file:projectile.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o projectile.cmo projectile.ml
# Target: state.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:state.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules state.ml > state.ml.depends
# Target: state.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:state.cmo, file:state.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o state.cmo state.ml
# Target: test.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules test.ml > test.ml.depends
# Target: test.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o test.cmo test.ml
# Target: maindemo.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:maindemo.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules maindemo.ml > maindemo.ml.depends
# Target: maindemo.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:maindemo.cmo, file:maindemo.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o maindemo.cmo maindemo.ml
# Target: draw_maze.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:mli, file:draw_maze.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules draw_maze.mli > draw_maze.mli.depends
# Target: draw_maze.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:mli, file:draw_maze.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o draw_maze.cmi draw_maze.mli
# Target: draw_maze.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), extension:ml, file:draw_maze.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules draw_maze.ml > draw_maze.ml.depends
# Target: draw_maze.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, extension:cmo, extension:ml, file:draw_maze.cmo, file:draw_maze.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -package ounit2 -package ANSITerminal -package graphics -o draw_maze.cmo draw_maze.ml
# Compilation successful.
