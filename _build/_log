### Starting build.
# Target: test.ml.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:ml, file:test.ml, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules test.ml > test.ml.depends
# Target: camel.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:camel.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules camel.mli > camel.mli.depends # cached
# Target: position.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:position.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules position.mli > position.mli.depends # cached
# Target: position.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:position.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o position.cmi position.mli
# Target: coin.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:coin.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules coin.mli > coin.mli.depends # cached
# Target: enemy.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:enemy.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules enemy.mli > enemy.mli.depends # cached
# Target: maze.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:maze.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules maze.mli > maze.mli.depends # cached
# Target: projectile.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:projectile.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules projectile.mli > projectile.mli.depends # cached
# Target: state.mli.depends, tags: { package(ANSITerminal), package(graphics), package(ounit2), debug, extension:mli, file:state.mli, ocaml, ocamldep, quiet, traverse }
ocamlfind ocamldep -package ounit2 -package ANSITerminal -package graphics -modules state.mli > state.mli.depends # cached
# Target: camel.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:camel.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o camel.cmi camel.mli
# Target: coin.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:coin.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o coin.cmi coin.mli
# Target: enemy.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:enemy.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o enemy.cmi enemy.mli
# Target: maze.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:maze.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o maze.cmi maze.mli
# Target: projectile.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:projectile.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o projectile.cmi projectile.mli
# Target: state.cmi, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:mli, file:state.mli, interf, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o state.cmi state.mli
# Target: test.cmo, tags: { package(ANSITerminal), package(graphics), package(ounit2), byte, compile, debug, extension:cmo, extension:ml, file:test.cmo, file:test.ml, implem, ocaml, quiet, traverse }
ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o test.cmo test.ml
+ ocamlfind ocamlc -c -g -package ounit2 -package ANSITerminal -package graphics -o test.cmo test.ml
File "test.ml", line 77, characters 28-44:
77 |       assert_equal exp_val (State.near_enemy camel st)
                                 ^^^^^^^^^^^^^^^^
Error: Unbound value State.near_enemy
Command exited with code 2.
# Compilation unsuccessful.
